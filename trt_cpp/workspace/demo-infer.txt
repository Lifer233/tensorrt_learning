// #include<demo-infer/demo-infer.hpp>
// #include<common/cuda-tools.hpp>

// using namespace std;


// static __global__ void decode_kernel(
//     float* predict, int num_bboxes, int num_classes, float confidence_threshold, 
//     float* invert_affine_matrix, float* parray, int max_objects, int NUM_BOX_ELEMENT
// ){  
//     int position = blockDim.x * blockIdx.x + threadIdx.x;
//     if (position >= num_bboxes) return;

//     float* pitem     = predict + (5 + num_classes) * position;
//     float objectness = pitem[4];
//     if(objectness < confidence_threshold)
//         return;

//     float* class_confidence = pitem + 5;
//     float confidence        = *class_confidence++;
//     int label               = 0;
//     for(int i = 1; i < num_classes; ++i, ++class_confidence){
//         if(*class_confidence > confidence){
//             confidence = *class_confidence;
//             label      = i;
//         }
//     }

//     confidence *= objectness;
//     if(confidence < confidence_threshold)
//         return;

//     //计数
//     int index = atomicAdd(parray, 1);
//     if(index >= max_objects)
//         return;

//     float cx         = *pitem++;
//     float cy         = *pitem++;
//     float width      = *pitem++;
//     float height     = *pitem++;
//     float left   = cx - width * 0.5f;
//     float top    = cy - height * 0.5f;
//     float right  = cx + width * 0.5f;
//     float bottom = cy + height * 0.5f;

//     // left, top, right, bottom, confidence, class, keepflag
//     float* pout_item = parray + 1 + index * NUM_BOX_ELEMENT;
//     *pout_item++ = left;
//     *pout_item++ = top;
//     *pout_item++ = right;
//     *pout_item++ = bottom;
//     *pout_item++ = confidence;
//     *pout_item++ = label;
//     *pout_item++ = 1; // 1 = keep, 0 = ignore
// }



// void decode_kernel_invoker(
//     float* predict, int num_bboxes, int num_classes, float confidence_threshold, 
//     float nms_threshold, float* invert_affine_matrix, float* parray, int max_objects, int NUM_BOX_ELEMENT, cudaStream_t stream){
    
//     auto block = num_bboxes > 512 ? 512 : num_bboxes;
//     auto grid = (num_bboxes + block - 1) / block;

//     decode_kernel<<<grid, block, 0, stream>>>(
//         predict, num_bboxes, num_classes, confidence_threshold, 
//         invert_affine_matrix, parray, max_objects, NUM_BOX_ELEMENT
//     );
// }







  